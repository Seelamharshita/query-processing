import pandas as pd
data = {
    'DEPARTMENT_ID': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150],
    'DEPARTMENT_NAME': ['Administration', 'Marketing', 'Purchasing', 'Human Resources', 'Shipping', 'IT', 'Public Relations', 'Sales', 'Executive', 'Finance', 'Accounting', 'Treasury', 'Corporate Tax', 'Control And Credit', 'Shareholder Services'],
    'MANAGER_ID': [200, 201, 114, 203, 121, 103, 204, 145, 100, 108, 205, 0, 0, 0, 0],
    'LOCATION_ID': [1700, 1800, 1700, 2400, 1500, 1400, 2700, 2500, 1700, 1700, 1700, 1700, 1700, 1700, 1700]
}
df=pd.DataFrame(data)
df['DEPARTMENT_ID']

0      10
1      20
2      30
3      40
4      50
5      60
6      70
7      80
8      90
9     100
10    110
11    120
12    130
13    140
14    150
Name: DEPARTMENT_ID, dtype: int64







2. Write a Pandas program to display the ID for those employees who did two or more jobs in the past
import pandas as pd

data = {
    'EMPLOYEE_ID': [102, 101, 101, 201, 114, 122, 200, 176, 176, 200],
    'START_DATE': ['2001-01-13', '1997-09-21', '2001-10-28', '2004-02-17', '2006-03-24', '2007-01-01', '1995-09-17', '2006-03-24', '2007-01-01', '2002-07-01'],
    'END_DATE': ['2006-07-24', '2001-10-27', '2005-03-15', '2007-12-19', '2007-12-31', '2007-12-31', '2001-06-17', '2006-12-31', '2007-12-31', '2006-12-31'],
    'JOB_ID': ['IT_PROG', 'AC_ACCOUNT', 'AC_MGR', 'MK_REP', 'ST_CLERK', 'ST_CLERK', 'AD_ASST', 'SA_REP', 'SA_MAN', 'AC_ACCOUNT'],
    'DEPARTMENT_ID': [60, 110, 110, 20, 50, 50, 90, 80, 80, 90]
}

df = pd.DataFrame(data)
# Group the DataFrame by 'EMPLOYEE_ID' and count the unique 'JOB_ID's
job_count = df.groupby('EMPLOYEE_ID')['JOB_ID'].nunique()

# Filter employees who have worked two or more jobs
employee = job_count[job_count >= 2]

# Display the IDs of employees with multiple jobs
if not employee.empty:
    print("Employee IDs with multiple jobs:")
    print(employee)
else:
    print("No employees with multiple jobs.")
Employee IDs with multiple jobs:
EMPLOYEE_ID
101    2
176    2
200    2
Name: JOB_ID, dtype: int64




3. Write a Pandas program to display the details of jobs in descending sequence on job title.
import pandas as pd

data = {
    'JOB_ID': ['AD_PRES', 'AD_VP', 'AD_ASST', 'FI_MGR', 'FI_ACCOUNT', 'AC_MGR', 'AC_ACCOUNT', 'SA_MAN', 'SA_REP', 'PU_MAN', 'PU_CLERK', 'ST_MAN', 'ST_CLERK', 'SH_CLERK', 'IT_PROG', 'MK_MAN', 'MK_REP', 'HR_REP', 'PR_REP'],
    'JOB_TITLE': ['President', 'Administration Vice President', 'Administration Assistant', 'Finance Manager', 'Accountant', 'Accounting Manager', 'Public Accountant', 'Sales Manager', 'Sales Representative', 'Purchasing Manager', 'Purchasing Clerk', 'Stock Manager', 'Stock Clerk', 'Shipping Clerk', 'Programmer', 'Marketing Manager', 'Marketing Representative', 'Human Resources Representative', 'Public Relations Representative'],
    'MIN_SALARY': [20080, 15000, 3000, 8200, 4200, 8200, 4200, 10000, 6000, 8000, 2500, 5500, 2008, 2500, 4000, 9000, 4000, 4000, 4500],
    'MAX_SALARY': [40000, 30000, 6000, 16000, 9000, 16000, 9000, 20080, 12008, 15000, 5500, 8500, 5000, 5500, 10000, 15000, 9000, 9000, 10500]
}

df = pd.DataFrame(data)
df_sorted = df.sort_values(by='JOB_TITLE', ascending=False)

# Display the sorted DataFrame
print(df_sorted)
        JOB_ID                        JOB_TITLE  MIN_SALARY  MAX_SALARY
11      ST_MAN                    Stock Manager        5500        8500
12    ST_CLERK                      Stock Clerk        2008        5000
13    SH_CLERK                   Shipping Clerk        2500        5500
8       SA_REP             Sales Representative        6000       12008
7       SA_MAN                    Sales Manager       10000       20080
9       PU_MAN               Purchasing Manager        8000       15000
10    PU_CLERK                 Purchasing Clerk        2500        5500
18      PR_REP  Public Relations Representative        4500       10500
6   AC_ACCOUNT                Public Accountant        4200        9000
14     IT_PROG                       Programmer        4000       10000
0      AD_PRES                        President       20080       40000
16      MK_REP         Marketing Representative        4000        9000
15      MK_MAN                Marketing Manager        9000       15000
17      HR_REP   Human Resources Representative        4000        9000
3       FI_MGR                  Finance Manager        8200       16000
1        AD_VP    Administration Vice President       15000       30000
2      AD_ASST         Administration Assistant        3000        6000
5       AC_MGR               Accounting Manager        8200       16000
4   FI_ACCOUNT                       Accountant        4200        9000


4. Write a Pandas program to create a line plot of the historical stock prices of Alphabet Inc. between two specific dates
import pandas as pd
import matplotlib.pyplot as plt

data = {
    'Date': ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05', '2023-01-06'],
    'Close': [2800.00, 2820.50, 2835.75, 2845.25, 2830.00, 2850.00]
}

df = pd.DataFrame(data)
# Convert the 'Date' column to a datetime object
df['Date'] = pd.to_datetime(df['Date'])

# Set the 'Date' column as the index
df.set_index('Date', inplace=True)

# Define the start and end dates
start_date = '2023-01-02'
end_date = '2023-01-05'

# Slice the DataFrame to select data between the specified dates
df = df[start_date:end_date]
plt.figure(figsize=(10, 5))
plt.plot(df.index, df['Close'], marker='o', linestyle='-')
plt.title('Alphabet Inc. Stock Prices')
plt.xlabel('Date')
plt.ylabel('Closing Price')
plt.grid(True)

plt.show()



5. Write a Pandas program to create a bar plot of the trading volume of Alphabet Inc. stock between two specific dates
import pandas as pd
import matplotlib.pyplot as plt

data = {
    'Date': ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05', '2023-01-06'],
    'Volume': [2000000, 2200000, 1800000, 2400000, 2100000, 2300000]
}

df = pd.DataFrame(data)
# Convert the 'Date' column to a datetime object
df['Date'] = pd.to_datetime(df['Date'])

# Set the 'Date' column as the index
df.set_index('Date', inplace=True)

# Define the start and end dates
start_date = '2023-01-02'
end_date = '2023-01-05'

# Slice the DataFrame to select data between the specified dates
df = df[start_date:end_date]
plt.figure(figsize=(10, 5))
plt.bar(df.index, df['Volume'], width=0.5)
plt.title('Alphabet Inc. Trading Volume')
plt.xlabel('Date')
plt.ylabel('Volume')
plt.grid(axis='y')

plt.show()



6. Write a Pandas program to create a scatter plot of the trading volume/stock prices of Alphabet Inc. stock between two specific dates
import pandas as pd
import matplotlib.pyplot as plt

# Read the data from the CSV file
df = pd.read_csv(r'GOOGL.csv')  # Replace 'your_data.csv' with the actual file path

# Convert the 'Date' column to a datetime object
df['Date'] = pd.to_datetime(df['Date'])

# Define the start and end dates
start_date = '2005-01-02'
end_date = '2006-01-05'

# Slice the DataFrame to select data between the specified dates
df_selected = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]

# Create a scatter plot
plt.figure(figsize=(10, 5))
plt.scatter(df_selected['Volume'], df_selected['Close'])
plt.title('Alphabet Inc. Trading Volume vs. Stock Price')
plt.xlabel('Trading Volume')
plt.ylabel('Stock Price')
plt.grid(True)

# Display the plot
plt.show()
C:\Users\krish\AppData\Local\Temp\ipykernel_1344\2200685793.py:8: UserWarning: Parsing dates in %d/%m/%Y format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.
  df['Date'] = pd.to_datetime(df['Date'])




7. Write a Pandas program to create a Pivot table and find the maximum and minimum sale value of the items
import pandas as pd
data = {
    'Item': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
             'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T'],
    'Sale': [100, 150, 120, 130, 110, 160, 130, 140, 170, 120,
             200, 180, 140, 120, 110, 190, 130, 140, 150, 120],
}

df = pd.DataFrame(data)
# Create a pivot table to find the maximum and minimum sale values for each item
pivot_table = df.pivot_table(index='Item', values='Sale', aggfunc={'Sale': ['max', 'min']})

# Rename the columns for clarity
pivot_table.columns = ['Max Sale', 'Min Sale']

# Display the pivot table
print(pivot_table)
      Max Sale  Min Sale
Item                    
A          100       100
B          150       150
C          120       120
D          130       130
E          110       110
F          160       160
G          130       130
H          140       140
I          170       170
J          120       120
K          200       200
L          180       180
M          140       140
N          120       120
O          110       110
P          190       190
Q          130       130
R          140       140
S          150       150
T          120       120



8. Write a Pandas program to create a Pivot table and find the item wise unit sold
import pandas as pd
data = {
    'Item': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
             'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T'],
    'Unit': [100, 150, 120, 130, 110, 160, 130, 140, 170, 120,
             200, 180, 140, 120, 110, 190, 130, 140, 150, 120]
}

df = pd.DataFrame(data)
pivot_table = df.pivot_table(index='Item', values='Unit', aggfunc='sum')

# Rename the column for clarity
pivot_table.columns = ['Total Units Sold']

# Display the pivot table
print(pivot_table)
      Total Units Sold
Item                  
A                  100
B                  150
C                  120
D                  130
E                  110
F                  160
G                  130
H                  140
I                  170
J                  120
K                  200
L                  180
M                  140
N                  120
O                  110
P                  190
Q                  130
R                  140
S                  150
T                  120
